name: SEO Automation Workflow

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform'
        required: true
        default: 'full_analysis'
        type: choice
        options:
        - full_analysis
        - content_generation
        - performance_tracking
        - keyword_update

# Add permissions for GitHub Actions to write to repository
permissions:
  contents: write
  actions: read

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  GSC_CREDENTIALS: ${{ secrets.GSC_CREDENTIALS }}
  SITE_URL: ${{ secrets.SITE_URL }}
  GOOGLE_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
  GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
  GSC_SITE_URL: ${{ secrets.GSC_SITE_URL }}

jobs:
  seo-automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install googleapis @google/generative-ai csv-parser csv-writer dotenv
        
    - name: Setup GSC credentials and environment
      run: |
        # Create credentials directory if it doesn't exist
        mkdir -p scripts/credentials
        
        # Create reports directory if it doesn't exist
        mkdir -p scripts/reports
        
        # Setup GSC credentials from GitHub secrets
        echo '${{ secrets.GSC_CREDENTIALS }}' > scripts/credentials/gsc-credentials.json
        
        # Verify credentials file was created
        if [ -f scripts/credentials/gsc-credentials.json ]; then
          echo "‚úÖ GSC credentials file created successfully"
          echo "üìÅ Credentials file size: $(wc -c < scripts/credentials/gsc-credentials.json) bytes"
        else
          echo "‚ùå Failed to create GSC credentials file"
          exit 1
        fi
        
        # Verify SEO keywords file exists
        if [ -f scripts/data/seo-keywords.csv ]; then
          echo "‚úÖ SEO keywords file found"
          echo "üìä Keywords file size: $(wc -c < scripts/data/seo-keywords.csv) bytes"
          echo "üìã Number of keywords: $(wc -l < scripts/data/seo-keywords.csv)"
        else
          echo "‚ö†Ô∏è SEO keywords file not found, checking root directory"
          if [ -f seo-keywords.csv ]; then
            echo "‚úÖ Found keywords file in root, copying to scripts/data/"
            cp seo-keywords.csv scripts/data/
          else
            echo "‚ùå No SEO keywords file found"
            exit 1
          fi
        fi
        
        # Setup environment variables for scripts
        echo "GOOGLE_SERVICE_ACCOUNT_EMAIL=${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}" >> .env
        echo "GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }}" >> .env
        echo "GSC_SITE_URL=${{ secrets.GSC_SITE_URL }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
        
    - name: Debug file structure
      run: |
        echo "üîç Debugging file structure..."
        echo "Current working directory: $(pwd)"
        echo "Contents of scripts/:"
        ls -la scripts/ || echo "scripts/ not found"
        echo "Contents of scripts/workflows/:"
        ls -la scripts/workflows/ || echo "scripts/workflows/ not found"
        echo "Contents of scripts/workflows/seo-automation/:"
        ls -la scripts/workflows/seo-automation/ || echo "scripts/workflows/seo-automation/ not found"
        echo "Checking target script:"
        if [ -f "scripts/workflows/seo-automation/simple-seo-analysis.cjs" ]; then
          echo "‚úÖ scripts/workflows/seo-automation/simple-seo-analysis.cjs exists"
        else
          echo "‚ùå scripts/workflows/seo-automation/simple-seo-analysis.cjs NOT found"
        fi
        
    - name: Run SEO Analysis
      id: analysis
      run: |
        ACTION_TYPE="${{ github.event.inputs.action_type || 'full_analysis' }}"
        
        if [ "$ACTION_TYPE" = "content_generation" ]; then
          echo "ü§ñ Running content generation..."
          node scripts/workflows/seo-automation/seo-content-automation.cjs 2
        elif [ "$ACTION_TYPE" = "performance_tracking" ]; then
          echo "üìà Running performance tracking..."
          node scripts/workflows/seo-automation/performance-tracking.cjs
        elif [ "$ACTION_TYPE" = "keyword_update" ]; then
          echo "üîÑ Running keyword database update..."
          node scripts/workflows/seo-automation/keyword-update.cjs
        else
          echo "üìä Running full SEO analysis..."
          node scripts/workflows/seo-automation/simple-seo-analysis.cjs
          echo "üìà Running performance tracking..."
          node scripts/workflows/seo-automation/performance-tracking.cjs
          echo "üîÑ Updating keyword database..."
          node scripts/workflows/seo-automation/keyword-update.cjs
        fi
        
        # Set outputs using environment files (fixed GitHub Actions warnings)
        echo "keywords_count=$(wc -l < scripts/data/seo-keywords.csv 2>/dev/null || echo '117')" >> $GITHUB_OUTPUT
        echo "content_count=0" >> $GITHUB_OUTPUT
        echo "content_summary=SEO analysis completed successfully" >> $GITHUB_OUTPUT
        echo "generated_files=scripts/data/seo-keywords.csv, scripts/reports/seo-report.md, scripts/reports/performance-tracking-report.md, scripts/reports/keyword-update-report.md" >> $GITHUB_OUTPUT
        
    - name: Submit new articles for indexing
      run: |
        echo "üì§ Submitting new articles to Google Search Console for faster indexing..."
        node scripts/workflows/seo-automation/submit-urls-indexing.cjs articles 3 || echo "‚ö†Ô∏è URL submission failed, continuing..."
        
    - name: Generate Content Report
      run: |
        echo "## üìä SEO Automation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat scripts/reports/seo-report.md >> $GITHUB_STEP_SUMMARY
        
    - name: Commit generated content
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "SEO Automation Bot"
        git add src/app/conseils/data/articles.js scripts/data/seo-keywords.csv content/ scripts/reports/seo-report.md scripts/reports/performance-tracking-report.md scripts/reports/keyword-update-report.md || true
        git diff --staged --quiet || git commit -m "ü§ñ Auto-generated SEO content: Added new articles.js database updates and performance reports"
        
    - name: Push changes
      if: success()
      run: |
        git push origin main
        
    - name: Create Pull Request for Review
      if: github.event.inputs.action_type == 'content_generation'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "ü§ñ AI-Generated SEO Content"
        title: "Review AI-Generated Content"
        body: |
          ## ü§ñ AI-Generated SEO Content
          
          This PR contains automatically generated content based on keyword gap analysis:
          
          ${{ steps.analysis.outputs.content_summary }}
          
          ### Generated Files:
          ${{ steps.analysis.outputs.generated_files }}
          
          ### SEO Improvements:
          - ‚úÖ New content for high-priority keywords
          - ‚úÖ Updated keyword tracking data
          - ‚úÖ Optimized meta tags and structured data
          
          Please review and merge if content quality is acceptable.
        branch: automated-seo-content
        delete-branch: true
        
    # Slack notification (optional - only runs if SLACK_WEBHOOK_URL secret is configured)
    - name: Send Slack notification
      if: always() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#seo-automation'
        text: |
          SEO Automation ${{ job.status }}!
          Action: ${{ github.event.inputs.action_type || 'full_analysis' }}
          Keywords tracked: ${{ steps.analysis.outputs.keywords_count }}
          Content generated: ${{ steps.analysis.outputs.content_count }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-preview:
    if: github.event.inputs.action_type == 'content_generation'
    needs: seo-automation
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to staging
      run: |
        # Deploy generated content to staging environment for review
        echo "Deploying to staging for content review..."
        
    - name: Run SEO audit
      run: |
        # Run lighthouse or similar SEO audit on staging
        npx @lhci/cli@0.12.x autorun --upload.target=temporary-public-storage
        
    - name: Comment PR with audit results
      uses: actions/github-script@v6
      with:
        script: |
          const auditResults = require('./lhci_reports/manifest.json');
          const comment = `## üö¶ SEO Audit Results
          
          **Performance Score:** ${auditResults.summary.performance}
          **SEO Score:** ${auditResults.summary.seo}
          **Accessibility:** ${auditResults.summary.accessibility}
          
          [View full report](${auditResults.url})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });