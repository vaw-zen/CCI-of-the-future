// Script to check raw Facebook API response vs normalized response
console.log('üîç Checking Raw vs Normalized Facebook API Response\n');

async function checkAPIDiscrepancy() {
  try {
    // First, let's simulate what we think the Facebook API should return
    console.log('üìã Expected Facebook Video Reels API Fields:');
    console.log('==========================================');
    console.log('According to Facebook documentation:');
    console.log('‚Ä¢ id - ‚úÖ working');
    console.log('‚Ä¢ created_time - ‚úÖ working');
    console.log('‚Ä¢ permalink_url - ‚úÖ working');
    console.log('‚Ä¢ source - for video URL');
    console.log('‚Ä¢ description - for message/content');
    console.log('‚Ä¢ thumbnails{data{uri}} - for thumbnail image');
    console.log('‚Ä¢ picture - alternative thumbnail field');
    
    console.log('\nüîç Current API normalization logic:');
    console.log('===================================');
    console.log('thumbnails extraction:');
    console.log('  item.picture || item.thumbnails?.data?.[0]?.uri || null');
    
    console.log('\nüí° POTENTIAL ISSUE IDENTIFIED:');
    console.log('==============================');
    console.log('‚ùå Mismatch between API request and extraction logic');
    console.log('');
    console.log('API Request asks for:');
    console.log('  fields=...thumbnails...');
    console.log('');
    console.log('But extraction looks for:');
    console.log('  item.picture (not requested in fields)');
    console.log('  item.thumbnails?.data?.[0]?.uri (complex structure)');
    console.log('');
    console.log('However, our processed response shows:');
    console.log('  thumbnail: "https://scontent-iad3-1.xx.fbcdn.net/..." ‚úÖ');
    
    console.log('\nüîß POSSIBLE SOLUTIONS:');
    console.log('======================');
    console.log('1. Add "picture" to the Facebook API fields request');
    console.log('2. Fix the thumbnails extraction to handle the actual structure');
    console.log('3. Verify the thumbnails field structure that Facebook returns');
    
    console.log('\nüìä FIELD MAPPING ANALYSIS:');
    console.log('==========================');
    
    // Based on our earlier test, let's see what should be mapped
    const expectedMappings = {
      'thumbnail_source': ['picture', 'thumbnails.data[0].uri', 'fallback'],
      'video_url_source': ['source', 'permalink_url', 'fallback'],
      'message_source': ['description', 'message', 'fallback'],
      'date_source': ['created_time', 'fallback']
    };
    
    Object.entries(expectedMappings).forEach(([field, sources]) => {
      console.log(`${field}:`);
      sources.forEach((source, index) => {
        const priority = index === 0 ? 'PRIMARY' : index === sources.length - 1 ? 'FALLBACK' : 'SECONDARY';
        console.log(`  ${index + 1}. ${source} (${priority})`);
      });
      console.log('');
    });
    
    console.log('üéØ RECOMMENDED API FIELD REQUEST:');
    console.log('=================================');
    console.log('video_reels?fields=');
    console.log('  id,');
    console.log('  created_time,');
    console.log('  permalink_url,');
    console.log('  source,');
    console.log('  description,');
    console.log('  picture,              ‚Üê ADD THIS');
    console.log('  thumbnails{data{uri}}, ‚Üê VERIFY STRUCTURE');
    console.log('  insights.metric(...),');
    console.log('  likes.summary(true)');
    
    console.log('\nüîß NEXT STEPS:');
    console.log('==============');
    console.log('1. Add "picture" field to Facebook API request');
    console.log('2. Debug the actual "thumbnails" field structure');
    console.log('3. Ensure the normalization extracts all available thumbnail sources');
    console.log('4. Test with reels that might be missing thumbnails');
    
  } catch (error) {
    console.error('‚ùå Error in analysis:', error.message);
  }
}

// Run the analysis
checkAPIDiscrepancy();