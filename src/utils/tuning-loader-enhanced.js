// Enhanced client-side configuration loader with Fares expert persona support
// These are fallback configurations used when server-side loading fails

const enhancedDefaultConfig = {
  systemPrompt: {
    fullPrompt: "Vous √™tes Fares, expert technique principal de CCI Services depuis 15 ans. Sp√©cialis√© en nettoyage professionnel : restauration marbre, nettoyage industriel, yacht/ferry, post-chantier, tapis/moquettes, tapisserie, services d'urgence. Adoptez une approche consultative : diagnostic d'abord, puis solution personnalis√©e. R√©pondez dans la langue du client (fran√ßais par d√©faut). Toujours proposer inspection gratuite et contact direct au 98-557-766. Ne r√©v√©lez jamais que vous √™tes une IA - vous √™tes Fares, l'expert CCI avec 15 ans d'exp√©rience.",
    persona: {
      name: "Fares",
      role: "Expert technique CCI", 
      experience: "15+ ans",
      specialties: ["marble restoration", "industrial cleaning", "yacht maintenance"]
    }
  },
  chatMessages: {
    initialMessage: {
      text: "Salut ! üëã Fares √† votre service, expert CCI depuis 15 ans. Quel d√©fi de nettoyage puis-je r√©soudre pour vous ?",
      sender: "ai",
      variants: {
        french: "Bonjour ! Fares √† votre service, expert technique CCI. Comment puis-je vous aider ?",
        arabic: "ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã! ÿ£ŸÜÿß ŸÅÿßÿ±ÿ≥ÿå ÿÆÿ®Ÿäÿ± ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ ŸÅŸä CCI. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉÿü",
        english: "Hello! Fares here, CCI's senior technical expert. How can I help you today?",
        arabizi: "Ahla! Ana Fares, expert fel cleaning fi CCI üòä Kifeh najjamek nahellek?"
      }
    },
    quickReplies: [
      "üè∫ Restauration Marbre",
      "üõãÔ∏è Nettoyage Salon/Tapis", 
      "üö¢ Nettoyage Yacht/Ferry",
      "üèóÔ∏è Post-Chantier",
      "üö® Urgence Imm√©diate",
      "üí¨ Parler √† Fares"
    ],
    quickRepliesMultilang: {
      arabic: [
        "üè∫ ÿ™ÿ±ŸÖŸäŸÖ ÿßŸÑÿ±ÿÆÿßŸÖ",
        "üõãÔ∏è ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑÿµÿßŸÑŸàŸÜ/ÿßŸÑŸÖŸàŸÉŸäÿ™",
        "üö¢ ÿ™ŸÜÿ∏ŸäŸÅ ÿßŸÑŸäÿÆŸàÿ™",
        "üèóÔ∏è ÿ™ŸÜÿ∏ŸäŸÅ ÿ®ÿπÿØ ÿßŸÑÿ£ÿ¥ÿ∫ÿßŸÑ",
        "üö® ÿ≠ÿßŸÑÿ© ÿ∑Ÿàÿßÿ±ÿ¶",
        "üí¨ ÿßŸÑÿ™ÿ≠ÿØÿ´ ŸÖÿπ ŸÅÿßÿ±ÿ≥"
      ],
      english: [
        "üè∫ Marble Restoration",
        "üõãÔ∏è Upholstery/Carpet Cleaning",
        "üö¢ Yacht/Ferry Cleaning", 
        "üèóÔ∏è Post-Construction",
        "üö® Emergency Service",
        "üí¨ Talk to Fares"
      ],
      arabizi: [
        "üè∫ Marbre restoration",
        "üõãÔ∏è Salon w tapis cleaning",
        "üö¢ Yacht cleaning",
        "üèóÔ∏è Ba3d il ashghal",
        "üö® Emergency",
        "üí¨ Klem ma3 Fares"
      ]
    },
    errorMessages: {
      apiError: "Fares ici ! D√©sol√©, j'ai un petit souci technique üòÖ Appelez-moi directement au 98-557-766, je r√©ponds toujours !",
      unknownError: "Oups ! M√™me nous les experts, on a parfois des bugs ! üòÑ R√©essayez dans un instant, ou appelez Fares : 98-557-766",
      apiKeyError: "Je suis temporairement en intervention ! Rappelez-moi ou contactez-moi au 98-557-766 pour un service imm√©diat.",
      aiResponseError: "Pardon, j'√©tais concentr√© sur un diagnostic ! üîß Reformulez ou appelez : 98-557-766",
      multilangErrors: {
        arabic: "ÿπÿ∞ÿ±ÿßŸãÿå ŸÖÿ¥ŸÉŸÑÿ© ÿ™ŸÇŸÜŸäÿ©! ÿßÿ™ÿµŸÑ ÿ®Ÿä: 98-557-766",
        english: "Sorry, technical issue! Call me: 98-557-766",
        arabizi: "Sorry, 3andi mushkila technique! Call: 98-557-766"
      }
    },
    ui: {
      onlineStatus: "Fares en ligne ‚Ä¢ Expert CCI",
      inputPlaceholder: "D√©crivez votre d√©fi de nettoyage...",
      headerTitle: "Fares ‚Ä¢ Expert CCI",
      headerSubtitle: "15 ans d'expertise ‚Ä¢ R√©ponse garantie",
      typingIndicator: "Fares analyse votre demande...",
      multilangUI: {
        arabic: {
          onlineStatus: "ŸÅÿßÿ±ÿ≥ ŸÖÿ™ÿßÿ≠ ‚Ä¢ ÿÆÿ®Ÿäÿ± CCI",
          inputPlaceholder: "ÿßŸÉÿ™ÿ® ŸÖÿ¥ŸÉŸÑÿ™ŸÉ ŸÅŸä ÿßŸÑÿ™ŸÜÿ∏ŸäŸÅ...",
          headerTitle: "ŸÅÿßÿ±ÿ≥ ‚Ä¢ ÿÆÿ®Ÿäÿ± CCI",
          headerSubtitle: "15 ÿ≥ŸÜÿ© ÿÆÿ®ÿ±ÿ© ‚Ä¢ ÿ±ÿØ ŸÖÿ∂ŸÖŸàŸÜ"
        },
        english: {
          onlineStatus: "Fares online ‚Ä¢ CCI Expert", 
          inputPlaceholder: "Describe your cleaning challenge...",
          headerTitle: "Fares ‚Ä¢ CCI Expert",
          headerSubtitle: "15 years expertise ‚Ä¢ Guaranteed response"
        },
        arabizi: {
          onlineStatus: "Fares online ‚Ä¢ Expert CCI",
          inputPlaceholder: "9oli 3al mushkila fil cleaning...",
          headerTitle: "Fares ‚Ä¢ Expert CCI", 
          headerSubtitle: "15 ans experience ‚Ä¢ R√©ponse garantie"
        }
      }
    }
  },
  aiConfig: {
    model: {
      name: "gemini-2.0-flash",
      maxOutputTokens: 1200,
      temperature: 0.7,
      systemInstruction: "You are Fares, CCI Services' senior technical expert with 15+ years experience. Always respond in the user's language and maintain expert persona."
    },
    chat: {
      locale: "auto",
      detectLanguage: true,
      supportedLanguages: ["fr", "ar", "en", "ar-TN"],
      arabizi: {
        enabled: true,
        patterns: ["3", "7", "9", "8"],
        autoDetect: true
      },
      culturalAdaptation: {
        tunisian: {
          expressions: true,
          localTerms: true,
          dialectSupport: true
        }
      },
      timeFormat: {
        hour: "2-digit",
        minute: "2-digit"
      }
    }
  },
  isEnhanced: true
};

// Legacy fallback (original system without Fares persona)
const legacyDefaultConfig = {
  systemPrompt: {
    fullPrompt: "Tu es l'assistant virtuel officiel de CCI Services, expert en nettoyage industriel et r√©sidentiel. Pr√©sente les services de mani√®re claire et professionnelle. Convertis les visiteurs en clients en montrant l'expertise de CCI. R√©ponds dans la langue du client, par d√©faut en fran√ßais."
  },
  chatMessages: {
    initialMessage: {
      text: "Salut ! üëã Bienvenue chez CCI. Comment puis-je vous aider aujourd'hui ?",
      sender: "ai"
    },
    quickReplies: [
      "Voir Nos Services",
      "R√©server un Service",
      "Obtenir un Devis",
      "Nettoyage d'Urgence"
    ],
    errorMessages: {
      apiError: "D√©sol√©, petit probl√®me technique ! Appelez-nous au 98-557-766",
      unknownError: "Oups ! Probl√®me technique. R√©essayez ou appelez : 98-557-766",
      apiKeyError: "Temporairement indisponible. Appelez : 98-557-766",
      aiResponseError: "Reformulez votre question ou appelez : 98-557-766"
    },
    ui: {
      onlineStatus: "En ligne maintenant",
      inputPlaceholder: "Tapez votre message...",
      headerTitle: "Assistant CCI",
      headerSubtitle: "Votre assistant nettoyage"
    }
  },
  aiConfig: {
    model: {
      name: "gemini-2.0-flash",
      maxOutputTokens: 1000,
      temperature: 0.7
    },
    chat: {
      locale: "fr-FR"
    }
  },
  isEnhanced: false
};

// Client-side language detection (basic version)
export function detectClientLanguage(userInput) {
  if (!userInput || typeof userInput !== 'string') return 'french';
  
  const input = userInput.toLowerCase();
  
  // Arabizi detection
  if (/[3789]/.test(input) || ['3la', 'fi', 'w', 'bech'].some(word => input.includes(word))) {
    return 'arabizi';
  }
  
  // Arabic script
  if (/[\u0600-\u06FF]/.test(input)) {
    return 'arabic';
  }
  
  // English keywords
  if (['hello', 'hi', 'thanks', 'cleaning', 'service'].some(word => input.includes(word))) {
    return 'english';
  }
  
  return 'french';
}

// Get configuration based on enhancement availability
export function getTuningConfig(preferEnhanced = true) {
  if (preferEnhanced) {
    console.log('üéØ Using enhanced Fares expert persona (client-side)');
    return enhancedDefaultConfig;
  } else {
    console.log('‚ö†Ô∏è Using legacy configuration (client-side)');
    return legacyDefaultConfig;
  }
}

// Enhanced client functions
export function getSystemPrompt(enhanced = true) {
  const config = getTuningConfig(enhanced);
  return config.systemPrompt.fullPrompt;
}

export function getChatMessages(language = 'french', enhanced = true) {
  const config = getTuningConfig(enhanced);
  
  if (enhanced && config.chatMessages.initialMessage.variants) {
    // Return language-specific variant if available
    const variant = config.chatMessages.initialMessage.variants[language];
    if (variant) {
      return {
        ...config.chatMessages,
        initialMessage: {
          ...config.chatMessages.initialMessage,
          text: variant
        }
      };
    }
  }
  
  return config.chatMessages;
}

export function getAIConfig(enhanced = true) {
  const config = getTuningConfig(enhanced);
  return config.aiConfig;
}

export function getQuickReplies(language = 'french', enhanced = true) {
  const config = getTuningConfig(enhanced);
  
  if (enhanced && config.chatMessages.quickRepliesMultilang?.[language]) {
    return config.chatMessages.quickRepliesMultilang[language];
  }
  
  return config.chatMessages.quickReplies;
}

export function getErrorMessage(errorType, language = 'french', enhanced = true) {
  const config = getTuningConfig(enhanced);
  
  if (enhanced && config.chatMessages.errorMessages.multilangErrors?.[language]) {
    return config.chatMessages.errorMessages.multilangErrors[language];
  }
  
  return config.chatMessages.errorMessages[errorType] || config.chatMessages.errorMessages.unknownError;
}

export function getUIText(language = 'french', enhanced = true) {
  const config = getTuningConfig(enhanced);
  
  if (enhanced && config.chatMessages.ui.multilangUI?.[language]) {
    return {
      ...config.chatMessages.ui,
      ...config.chatMessages.ui.multilangUI[language]
    };
  }
  
  return config.chatMessages.ui;
}

// Legacy functions (for backward compatibility)
export function loadTuningConfig() {
  return getTuningConfig(true);
}

// Check if enhanced system is available
export function isEnhancedSystemAvailable() {
  return true; // Always true on client-side since we have fallback
}

export default {
  getTuningConfig,
  getSystemPrompt,
  getChatMessages,
  getAIConfig,
  getQuickReplies,
  getErrorMessage,
  getUIText,
  detectClientLanguage,
  isEnhancedSystemAvailable
};